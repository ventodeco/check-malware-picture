from fileinput import filename
from flask import Flask, flash, redirect, render_template, request, url_for
import os
import urllib.request
import tensorflow as tf
import pandas as pd
import numpy as np
from werkzeug.utils import secure_filename
from RGB2IMG_indo import *

flask_app = Flask(__name__)

UPLOAD_FOLDER = 'static/uploads'

flask_app.secret_key = "secret key"
flask_app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
flask_app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024

ALLOWED_EXTENSIONS = set(['png', 'jpg', 'jpeg', 'gif', 'bytes'])

class_name = ["Gatak", "Kelihos_ver1", "Kelihos_ver3", "Lollipop", 
                "Obfuscator.ACY", "Ramnit", "Simda", "Tracur", "Vundo"]
model_b0 = tf.keras.models.load_model("model/model_1a_effnetb0_224.h5")

def_size = 224

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

@flask_app.route("/")
def index():
    data = {
        "title": "Image Malware Detection",
        "selected": "index",
        "result": "",
    }
    return render_template("home.html", data=data)

@flask_app.route("/", methods=["POST"])
def upload_image():
    if 'file' not in request.files:
        flash('No file part')
        return redirect(request.url)
    file = request.files['file']
    if file.filename == '':
        flash('No image selected for uploading')
        return redirect(request.url)
    if file and allowed_file(file.filename):
        if request.form['type_image'] == 'rgb_grayscale':
            filename = secure_filename(file.filename)
            file.save(os.path.join(flask_app.config['UPLOAD_FOLDER'], filename))
            #print('upload_image filename: ' + filename)
            flash('Image successfully uploaded and displayed below')
            print(request.form['type_image'])
            img = tf.io.read_file('static/uploads/' + filename)
            img = tf.image.decode_jpeg(img, channels=3)
            img = tf.image.resize(img, [def_size, def_size])
            img_expand = tf.expand_dims(img, axis=0)

            pred_prob_img = model_b0.predict(img_expand)
            pred_classes_img = class_name[pred_prob_img.argmax()]
            data = {
                "filename": filename,
                "result": pred_classes_img,
                "types": "rgb_grayscale"
            }

        if request.form['type_image'] == 'bytes':
            filename = secure_filename(file.filename)
            plain_filename = filename.replace('.bytes', '')
            png_filename = plain_filename + '.png'
            file.save(os.path.join(flask_app.config['UPLOAD_FOLDER'], filename))
            # filepath_byte = tf.io.read_file('static/uploads/' + filename)
            print(filename)
            data_read = theByteFile('static/uploads/' + filename)
            data_combine = np.hstack(data_read)

            im_gray = settingArrayImageSize(data_combine, mode = "GRAY")

            savePictureAsArray(im_gray, png_filename)

            # print(png_filename)

            # return render_template('home.html')

            # file.save(os.path.join(flask_app.config['UPLOAD_FOLDER'], filename))
            # #print('upload_image filename: ' + filename)
            # flash('Image successfully uploaded and displayed below')
            # print(request.form['type_image'])
            # img = tf.io.read_file('static/uploads/' + filename)

            img = tf.io.read_file('static/uploads/' + png_filename)
            img = tf.image.decode_jpeg(img, channels=3)
            img = tf.image.resize(img, [def_size, def_size])

            img_expand = tf.expand_dims(img, axis=0)

            pred_prob_img = model_b0.predict(img_expand)
            pred_classes_img = class_name[pred_prob_img.argmax()]

            data = {
                "filename": png_filename,
                "result": pred_classes_img,
                "types": "bytes"
            }

            print(data)
        
        return render_template('home.html', data=data)
    else:
        flash('Allowed image types are - png, jpg, jpeg, gif')
        return redirect(request.url)

@flask_app.route("/display/<filename>")
def display_image(filename):
    return redirect(url_for('static', filename='uploads/' + filename), code=301)


if __name__ == "__main__":
    port = int(os.environ.get('PORT', 5000))
    flask_app.run(host='0.0.0.0', port=port, debug=True)
